import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, E as Emoji, v as validate_slots, e as element, c as claim_element, b as children, g as detach_dev, j as attr_dev, k as add_location, l as insert_dev, t as text, h as claim_text, n as set_data_dev, a as space, f as claim_space, m as append_dev, p as transition_in, q as group_outros, r as transition_out, u as check_outros, w as validate_each_argument, x as destroy_each, y as create_component, z as claim_component, A as mount_component, B as destroy_component, C as listen_dev, D as empty, F as toggle_class, o as noop } from './client.7853909a.js';
import { T as Tag, t as tagLabels, a as typeLabels } from './Tag.e73bc2cd.js';

/* src/components/Card.svelte generated by Svelte v3.32.2 */
const file = "src/components/Card.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (109:6) {#if post.link}
function create_if_block_4(ctx) {
	let span;
	let raw_value = /*post*/ ctx[1].link + "";

	const block = {
		c: function create() {
			span = element("span");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "link svelte-1i867j9");
			add_location(span, file, 109, 8, 2229);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			span.innerHTML = raw_value;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*post*/ 2 && raw_value !== (raw_value = /*post*/ ctx[1].link + "")) span.innerHTML = raw_value;		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(109:6) {#if post.link}",
		ctx
	});

	return block;
}

// (117:6) {#if post.date}
function create_if_block_3(ctx) {
	let t_value = /*post*/ ctx[1].date + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*post*/ 2 && t_value !== (t_value = /*post*/ ctx[1].date + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(117:6) {#if post.date}",
		ctx
	});

	return block;
}

// (125:2) {#if post.tags || post.slug}
function create_if_block(ctx) {
	let div;
	let t;
	let current;
	let if_block0 = /*post*/ ctx[1].tags && create_if_block_2(ctx);
	let if_block1 = /*post*/ ctx[1].slug && create_if_block_1(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block0) if_block0.l(div_nodes);
			t = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "foot svelte-1i867j9");
			add_location(div, file, 125, 4, 2499);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append_dev(div, t);
			if (if_block1) if_block1.m(div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*post*/ ctx[1].tags) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*post*/ 2) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*post*/ ctx[1].slug) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(125:2) {#if post.tags || post.slug}",
		ctx
	});

	return block;
}

// (127:6) {#if post.tags}
function create_if_block_2(ctx) {
	let span;
	let current;
	let each_value = [/*post*/ ctx[1].type, .../*post*/ ctx[1].tags];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			span = element("span");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(span_nodes);
			}

			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "svelte-1i867j9");
			add_location(span, file, 127, 8, 2548);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(span, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*post*/ 2) {
				each_value = [/*post*/ ctx[1].type, .../*post*/ ctx[1].tags];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(span, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(127:6) {#if post.tags}",
		ctx
	});

	return block;
}

// (129:10) {#each [post.type,...post.tags] as tagId}
function create_each_block(ctx) {
	let tag;
	let current;

	tag = new Tag({
			props: { tagId: /*tagId*/ ctx[3] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(tag.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(tag.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(tag, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const tag_changes = {};
			if (dirty & /*post*/ 2) tag_changes.tagId = /*tagId*/ ctx[3];
			tag.$set(tag_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tag.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tag.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(tag, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(129:10) {#each [post.type,...post.tags] as tagId}",
		ctx
	});

	return block;
}

// (134:6) {#if post.slug}
function create_if_block_1(ctx) {
	let a;
	let t;
	let a_href_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			a = element("a");
			t = text("Read More");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { rel: true, href: true, class: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, "Read More");
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "rel", "prefetch");
			attr_dev(a, "href", a_href_value = "blog/" + /*post*/ ctx[1].slug + "/");
			attr_dev(a, "class", "link svelte-1i867j9");
			add_location(a, file, 136, 8, 2874);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t);

			if (!mounted) {
				dispose = listen_dev(a, "click", /*click_handler*/ ctx[2], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*post*/ 2 && a_href_value !== (a_href_value = "blog/" + /*post*/ ctx[1].slug + "/")) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(134:6) {#if post.slug}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div3;
	let div2;
	let div0;
	let h40;
	let emoji;
	let t0;
	let t1;
	let div1;
	let h41;
	let t2_value = /*post*/ ctx[1].title + "";
	let t2;
	let t3;
	let t4;
	let p;
	let raw_value = /*post*/ ctx[1].blurb + "";
	let t5;
	let current;

	emoji = new Emoji({
			props: { symbol: /*post*/ ctx[1].emoji },
			$$inline: true
		});

	let if_block0 = /*post*/ ctx[1].link && create_if_block_4(ctx);
	let if_block1 = /*post*/ ctx[1].date && create_if_block_3(ctx);
	let if_block2 = (/*post*/ ctx[1].tags || /*post*/ ctx[1].slug) && create_if_block(ctx);

	const block = {
		c: function create() {
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			h40 = element("h4");
			create_component(emoji.$$.fragment);
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			div1 = element("div");
			h41 = element("h4");
			t2 = text(t2_value);
			t3 = space();
			if (if_block1) if_block1.c();
			t4 = space();
			p = element("p");
			t5 = space();
			if (if_block2) if_block2.c();
			this.h();
		},
		l: function claim(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h40 = claim_element(div0_nodes, "H4", { class: true });
			var h40_nodes = children(h40);
			claim_component(emoji.$$.fragment, h40_nodes);
			h40_nodes.forEach(detach_dev);
			t0 = claim_space(div0_nodes);
			if (if_block0) if_block0.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h41 = claim_element(div1_nodes, "H4", { class: true });
			var h41_nodes = children(h41);
			t2 = claim_text(h41_nodes, t2_value);
			h41_nodes.forEach(detach_dev);
			t3 = claim_space(div1_nodes);
			if (if_block1) if_block1.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t4 = claim_space(div3_nodes);
			p = claim_element(div3_nodes, "P", { class: true });
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			t5 = claim_space(div3_nodes);
			if (if_block2) if_block2.l(div3_nodes);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h40, "class", "svelte-1i867j9");
			add_location(h40, file, 105, 6, 2144);
			attr_dev(div0, "class", "emoji svelte-1i867j9");
			add_location(div0, file, 104, 4, 2118);
			attr_dev(h41, "class", "svelte-1i867j9");
			add_location(h41, file, 115, 6, 2346);
			attr_dev(div1, "class", "title svelte-1i867j9");
			add_location(div1, file, 114, 4, 2320);
			attr_dev(div2, "class", "head svelte-1i867j9");
			add_location(div2, file, 103, 2, 2095);
			attr_dev(p, "class", "svelte-1i867j9");
			add_location(p, file, 120, 2, 2429);
			attr_dev(div3, "class", "card svelte-1i867j9");
			add_location(div3, file, 102, 0, 2074);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div2);
			append_dev(div2, div0);
			append_dev(div0, h40);
			mount_component(emoji, h40, null);
			append_dev(div0, t0);
			if (if_block0) if_block0.m(div0, null);
			append_dev(div2, t1);
			append_dev(div2, div1);
			append_dev(div1, h41);
			append_dev(h41, t2);
			append_dev(div1, t3);
			if (if_block1) if_block1.m(div1, null);
			append_dev(div3, t4);
			append_dev(div3, p);
			p.innerHTML = raw_value;
			append_dev(div3, t5);
			if (if_block2) if_block2.m(div3, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const emoji_changes = {};
			if (dirty & /*post*/ 2) emoji_changes.symbol = /*post*/ ctx[1].emoji;
			emoji.$set(emoji_changes);

			if (/*post*/ ctx[1].link) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_4(ctx);
					if_block0.c();
					if_block0.m(div0, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if ((!current || dirty & /*post*/ 2) && t2_value !== (t2_value = /*post*/ ctx[1].title + "")) set_data_dev(t2, t2_value);

			if (/*post*/ ctx[1].date) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_3(ctx);
					if_block1.c();
					if_block1.m(div1, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if ((!current || dirty & /*post*/ 2) && raw_value !== (raw_value = /*post*/ ctx[1].blurb + "")) p.innerHTML = raw_value;
			if (/*post*/ ctx[1].tags || /*post*/ ctx[1].slug) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*post*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div3, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(emoji.$$.fragment, local);
			transition_in(if_block2);
			current = true;
		},
		o: function outro(local) {
			transition_out(emoji.$$.fragment, local);
			transition_out(if_block2);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
			destroy_component(emoji);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Card", slots, []);
	let { post } = $$props;
	let { onHome } = $$props;
	const writable_props = ["post", "onHome"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Card> was created with unknown prop '${key}'`);
	});

	const click_handler = () => $$invalidate(0, onHome = false);

	$$self.$$set = $$props => {
		if ("post" in $$props) $$invalidate(1, post = $$props.post);
		if ("onHome" in $$props) $$invalidate(0, onHome = $$props.onHome);
	};

	$$self.$capture_state = () => ({ Tag, Emoji, post, onHome });

	$$self.$inject_state = $$props => {
		if ("post" in $$props) $$invalidate(1, post = $$props.post);
		if ("onHome" in $$props) $$invalidate(0, onHome = $$props.onHome);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [onHome, post, click_handler];
}

class Card extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { post: 1, onHome: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Card",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*post*/ ctx[1] === undefined && !("post" in props)) {
			console.warn("<Card> was created without expected prop 'post'");
		}

		if (/*onHome*/ ctx[0] === undefined && !("onHome" in props)) {
			console.warn("<Card> was created without expected prop 'onHome'");
		}
	}

	get post() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set post(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get onHome() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set onHome(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/PostFilter.svelte generated by Svelte v3.32.2 */
const file$1 = "src/components/PostFilter.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

// (74:0) {#if tags && types}
function create_if_block$1(ctx) {
	let t;
	let if_block1_anchor;
	let if_block0 = /*types*/ ctx[3].length && create_if_block_3$1(ctx);
	let if_block1 = /*tags*/ ctx[2].length && create_if_block_1$1(ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block0) if_block0.l(nodes);
			t = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			if_block1_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, if_block1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*types*/ ctx[3].length) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_3$1(ctx);
					if_block0.c();
					if_block0.m(t.parentNode, t);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*tags*/ ctx[2].length) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_1$1(ctx);
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(if_block1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(74:0) {#if tags && types}",
		ctx
	});

	return block;
}

// (75:2) {#if types.length}
function create_if_block_3$1(ctx) {
	let h3;
	let t0;
	let t1;
	let span;
	let each_value_1 = /*types*/ ctx[3];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			h3 = element("h3");
			t0 = text("Include");
			t1 = space();
			span = element("span");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			h3 = claim_element(nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "Include");
			h3_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(span_nodes);
			}

			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h3, "class", "svelte-1d3imom");
			add_location(h3, file$1, 75, 4, 1849);
			attr_dev(span, "class", "svelte-1d3imom");
			add_location(span, file$1, 76, 4, 1870);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h3, anchor);
			append_dev(h3, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, span, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(span, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*activeTypes, types, updateType, pluralize, typeLabels, tagLabels*/ 89) {
				each_value_1 = /*types*/ ctx[3];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(span, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h3);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(span);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3$1.name,
		type: "if",
		source: "(75:2) {#if types.length}",
		ctx
	});

	return block;
}

// (78:6) {#each types as typeId}
function create_each_block_1(ctx) {
	let code;
	let picture;
	let source0;
	let source0_srcset_value;
	let t0;
	let source1;
	let source1_srcset_value;
	let t1;
	let img;
	let img_src_value;
	let img_alt_value;
	let t2;
	let div;
	let t3_value = (/*pluralize*/ ctx[6](typeLabels[/*typeId*/ ctx[12]]) || /*pluralize*/ ctx[6](/*typeId*/ ctx[12])) + "";
	let t3;
	let t4;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[7](/*typeId*/ ctx[12]);
	}

	const block = {
		c: function create() {
			code = element("code");
			picture = element("picture");
			source0 = element("source");
			t0 = space();
			source1 = element("source");
			t1 = space();
			img = element("img");
			t2 = space();
			div = element("div");
			t3 = text(t3_value);
			t4 = space();
			this.h();
		},
		l: function claim(nodes) {
			code = claim_element(nodes, "CODE", { class: true });
			var code_nodes = children(code);
			picture = claim_element(code_nodes, "PICTURE", {});
			var picture_nodes = children(picture);
			source0 = claim_element(picture_nodes, "SOURCE", { srcset: true, type: true });
			t0 = claim_space(picture_nodes);
			source1 = claim_element(picture_nodes, "SOURCE", { srcset: true, type: true });
			t1 = claim_space(picture_nodes);
			img = claim_element(picture_nodes, "IMG", { src: true, alt: true, class: true });
			picture_nodes.forEach(detach_dev);
			t2 = claim_space(code_nodes);
			div = claim_element(code_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t3 = claim_text(div_nodes, t3_value);
			div_nodes.forEach(detach_dev);
			t4 = claim_space(code_nodes);
			code_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(source0, "srcset", source0_srcset_value = "tags/" + /*typeId*/ ctx[12] + ".webp");
			attr_dev(source0, "type", "image/webp");
			add_location(source0, file$1, 82, 12, 2053);
			attr_dev(source1, "srcset", source1_srcset_value = "tags/" + /*typeId*/ ctx[12] + ".png");
			attr_dev(source1, "type", "image/png");
			add_location(source1, file$1, 83, 12, 2122);
			if (img.src !== (img_src_value = "tags/" + /*typeId*/ ctx[12] + ".png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = `${tagLabels[/*typeId*/ ctx[12]] || /*typeId*/ ctx[12]} logo`);
			attr_dev(img, "class", "svelte-1d3imom");
			add_location(img, file$1, 84, 12, 2189);
			add_location(picture, file$1, 81, 10, 2031);
			attr_dev(div, "class", "tagLabel svelte-1d3imom");
			add_location(div, file$1, 88, 10, 2324);
			attr_dev(code, "class", "svelte-1d3imom");
			toggle_class(code, "activeTags", /*activeTypes*/ ctx[0].has(/*typeId*/ ctx[12]));
			add_location(code, file$1, 78, 8, 1915);
		},
		m: function mount(target, anchor) {
			insert_dev(target, code, anchor);
			append_dev(code, picture);
			append_dev(picture, source0);
			append_dev(picture, t0);
			append_dev(picture, source1);
			append_dev(picture, t1);
			append_dev(picture, img);
			append_dev(code, t2);
			append_dev(code, div);
			append_dev(div, t3);
			append_dev(code, t4);

			if (!mounted) {
				dispose = listen_dev(code, "click", click_handler, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*types*/ 8 && source0_srcset_value !== (source0_srcset_value = "tags/" + /*typeId*/ ctx[12] + ".webp")) {
				attr_dev(source0, "srcset", source0_srcset_value);
			}

			if (dirty & /*types*/ 8 && source1_srcset_value !== (source1_srcset_value = "tags/" + /*typeId*/ ctx[12] + ".png")) {
				attr_dev(source1, "srcset", source1_srcset_value);
			}

			if (dirty & /*types*/ 8 && img.src !== (img_src_value = "tags/" + /*typeId*/ ctx[12] + ".png")) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*types*/ 8 && img_alt_value !== (img_alt_value = `${tagLabels[/*typeId*/ ctx[12]] || /*typeId*/ ctx[12]} logo`)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty & /*types*/ 8 && t3_value !== (t3_value = (/*pluralize*/ ctx[6](typeLabels[/*typeId*/ ctx[12]]) || /*pluralize*/ ctx[6](/*typeId*/ ctx[12])) + "")) set_data_dev(t3, t3_value);

			if (dirty & /*activeTypes, types*/ 9) {
				toggle_class(code, "activeTags", /*activeTypes*/ ctx[0].has(/*typeId*/ ctx[12]));
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(code);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(78:6) {#each types as typeId}",
		ctx
	});

	return block;
}

// (96:2) {#if tags.length}
function create_if_block_1$1(ctx) {
	let t;
	let span;

	function select_block_type(ctx, dirty) {
		if (/*types*/ ctx[3].length) return create_if_block_2$1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);
	let each_value = /*tags*/ ctx[2];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			if_block.c();
			t = space();
			span = element("span");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			t = claim_space(nodes);
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(span_nodes);
			}

			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "svelte-1d3imom");
			add_location(span, file$1, 101, 4, 2592);
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, t, anchor);
			insert_dev(target, span, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(span, null);
			}
		},
		p: function update(ctx, dirty) {
			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(t.parentNode, t);
				}
			}

			if (dirty & /*activeTags, tags, updateTag, tagLabels*/ 38) {
				each_value = /*tags*/ ctx[2];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(span, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(span);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(96:2) {#if tags.length}",
		ctx
	});

	return block;
}

// (99:4) {:else}
function create_else_block(ctx) {
	let h3;
	let t;

	const block = {
		c: function create() {
			h3 = element("h3");
			t = text("Include");
			this.h();
		},
		l: function claim(nodes) {
			h3 = claim_element(nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t = claim_text(h3_nodes, "Include");
			h3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h3, "class", "svelte-1d3imom");
			add_location(h3, file$1, 99, 6, 2561);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h3, anchor);
			append_dev(h3, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(99:4) {:else}",
		ctx
	});

	return block;
}

// (97:4) {#if types.length}
function create_if_block_2$1(ctx) {
	let h3;
	let t;

	const block = {
		c: function create() {
			h3 = element("h3");
			t = text("About");
			this.h();
		},
		l: function claim(nodes) {
			h3 = claim_element(nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t = claim_text(h3_nodes, "About");
			h3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h3, "class", "svelte-1d3imom");
			add_location(h3, file$1, 97, 6, 2528);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h3, anchor);
			append_dev(h3, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$1.name,
		type: "if",
		source: "(97:4) {#if types.length}",
		ctx
	});

	return block;
}

// (103:6) {#each tags as tagId}
function create_each_block$1(ctx) {
	let code;
	let picture;
	let source0;
	let source0_srcset_value;
	let t0;
	let source1;
	let source1_srcset_value;
	let t1;
	let img;
	let img_src_value;
	let img_alt_value;
	let t2;
	let div;
	let t3_value = (tagLabels[/*tagId*/ ctx[9]] || /*tagId*/ ctx[9]) + "";
	let t3;
	let t4;
	let mounted;
	let dispose;

	function click_handler_1() {
		return /*click_handler_1*/ ctx[8](/*tagId*/ ctx[9]);
	}

	const block = {
		c: function create() {
			code = element("code");
			picture = element("picture");
			source0 = element("source");
			t0 = space();
			source1 = element("source");
			t1 = space();
			img = element("img");
			t2 = space();
			div = element("div");
			t3 = text(t3_value);
			t4 = space();
			this.h();
		},
		l: function claim(nodes) {
			code = claim_element(nodes, "CODE", { class: true });
			var code_nodes = children(code);
			picture = claim_element(code_nodes, "PICTURE", {});
			var picture_nodes = children(picture);
			source0 = claim_element(picture_nodes, "SOURCE", { srcset: true, type: true });
			t0 = claim_space(picture_nodes);
			source1 = claim_element(picture_nodes, "SOURCE", { srcset: true, type: true });
			t1 = claim_space(picture_nodes);
			img = claim_element(picture_nodes, "IMG", { src: true, alt: true, class: true });
			picture_nodes.forEach(detach_dev);
			t2 = claim_space(code_nodes);
			div = claim_element(code_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t3 = claim_text(div_nodes, t3_value);
			div_nodes.forEach(detach_dev);
			t4 = claim_space(code_nodes);
			code_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(source0, "srcset", source0_srcset_value = "tags/" + /*tagId*/ ctx[9] + ".webp");
			attr_dev(source0, "type", "image/webp");
			add_location(source0, file$1, 107, 12, 2769);
			attr_dev(source1, "srcset", source1_srcset_value = "tags/" + /*tagId*/ ctx[9] + ".png");
			attr_dev(source1, "type", "image/png");
			add_location(source1, file$1, 108, 12, 2837);
			if (img.src !== (img_src_value = "tags/" + /*tagId*/ ctx[9] + ".png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = `${tagLabels[/*tagId*/ ctx[9]] || /*tagId*/ ctx[9]} logo`);
			attr_dev(img, "class", "svelte-1d3imom");
			add_location(img, file$1, 109, 12, 2903);
			add_location(picture, file$1, 106, 10, 2747);
			attr_dev(div, "class", "tagLabel svelte-1d3imom");
			add_location(div, file$1, 113, 10, 3035);
			attr_dev(code, "class", "svelte-1d3imom");
			toggle_class(code, "activeTags", /*activeTags*/ ctx[1].has(/*tagId*/ ctx[9]));
			add_location(code, file$1, 103, 8, 2635);
		},
		m: function mount(target, anchor) {
			insert_dev(target, code, anchor);
			append_dev(code, picture);
			append_dev(picture, source0);
			append_dev(picture, t0);
			append_dev(picture, source1);
			append_dev(picture, t1);
			append_dev(picture, img);
			append_dev(code, t2);
			append_dev(code, div);
			append_dev(div, t3);
			append_dev(code, t4);

			if (!mounted) {
				dispose = listen_dev(code, "click", click_handler_1, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*tags*/ 4 && source0_srcset_value !== (source0_srcset_value = "tags/" + /*tagId*/ ctx[9] + ".webp")) {
				attr_dev(source0, "srcset", source0_srcset_value);
			}

			if (dirty & /*tags*/ 4 && source1_srcset_value !== (source1_srcset_value = "tags/" + /*tagId*/ ctx[9] + ".png")) {
				attr_dev(source1, "srcset", source1_srcset_value);
			}

			if (dirty & /*tags*/ 4 && img.src !== (img_src_value = "tags/" + /*tagId*/ ctx[9] + ".png")) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*tags*/ 4 && img_alt_value !== (img_alt_value = `${tagLabels[/*tagId*/ ctx[9]] || /*tagId*/ ctx[9]} logo`)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty & /*tags*/ 4 && t3_value !== (t3_value = (tagLabels[/*tagId*/ ctx[9]] || /*tagId*/ ctx[9]) + "")) set_data_dev(t3, t3_value);

			if (dirty & /*activeTags, tags*/ 6) {
				toggle_class(code, "activeTags", /*activeTags*/ ctx[1].has(/*tagId*/ ctx[9]));
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(code);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(103:6) {#each tags as tagId}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let if_block_anchor;
	let if_block = /*tags*/ ctx[2] && /*types*/ ctx[3] && create_if_block$1(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (/*tags*/ ctx[2] && /*types*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("PostFilter", slots, []);
	let { tags = [] } = $$props;
	let { types = [] } = $$props;
	let { activeTypes = [] } = $$props;
	let { activeTags = [] } = $$props;

	let updateType = typeId => {
		activeTypes.has(typeId)
		? activeTypes.delete(typeId)
		: activeTypes.add(typeId);

		$$invalidate(0, activeTypes = activeTypes.size == 0 ? new Set(types) : activeTypes);
	};

	let updateTag = tagId => {
		activeTags.has(tagId)
		? activeTags.delete(tagId)
		: activeTags.add(tagId);

		$$invalidate(1, activeTags = activeTags.size == 0 ? new Set(tags) : activeTags);
	};

	let pluralize = label => label.endsWith(".")
	? label.slice(0, -1) + "s."
	: label + "s";

	const writable_props = ["tags", "types", "activeTypes", "activeTags"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PostFilter> was created with unknown prop '${key}'`);
	});

	const click_handler = typeId => updateType(typeId);
	const click_handler_1 = tagId => updateTag(tagId);

	$$self.$$set = $$props => {
		if ("tags" in $$props) $$invalidate(2, tags = $$props.tags);
		if ("types" in $$props) $$invalidate(3, types = $$props.types);
		if ("activeTypes" in $$props) $$invalidate(0, activeTypes = $$props.activeTypes);
		if ("activeTags" in $$props) $$invalidate(1, activeTags = $$props.activeTags);
	};

	$$self.$capture_state = () => ({
		tagLabels,
		typeLabels,
		tags,
		types,
		activeTypes,
		activeTags,
		updateType,
		updateTag,
		pluralize
	});

	$$self.$inject_state = $$props => {
		if ("tags" in $$props) $$invalidate(2, tags = $$props.tags);
		if ("types" in $$props) $$invalidate(3, types = $$props.types);
		if ("activeTypes" in $$props) $$invalidate(0, activeTypes = $$props.activeTypes);
		if ("activeTags" in $$props) $$invalidate(1, activeTags = $$props.activeTags);
		if ("updateType" in $$props) $$invalidate(4, updateType = $$props.updateType);
		if ("updateTag" in $$props) $$invalidate(5, updateTag = $$props.updateTag);
		if ("pluralize" in $$props) $$invalidate(6, pluralize = $$props.pluralize);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		activeTypes,
		activeTags,
		tags,
		types,
		updateType,
		updateTag,
		pluralize,
		click_handler,
		click_handler_1
	];
}

class PostFilter extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			tags: 2,
			types: 3,
			activeTypes: 0,
			activeTags: 1
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PostFilter",
			options,
			id: create_fragment$1.name
		});
	}

	get tags() {
		throw new Error("<PostFilter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tags(value) {
		throw new Error("<PostFilter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get types() {
		throw new Error("<PostFilter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set types(value) {
		throw new Error("<PostFilter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get activeTypes() {
		throw new Error("<PostFilter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set activeTypes(value) {
		throw new Error("<PostFilter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get activeTags() {
		throw new Error("<PostFilter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set activeTags(value) {
		throw new Error("<PostFilter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Card as C, PostFilter as P };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
