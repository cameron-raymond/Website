import { W as writable, X as identity, Y as assign, Z as now, _ as loop, S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, J as add_render_callback, v as validate_slots, $ as validate_store, a0 as component_subscribe, T as onMount, M as fly, N as fade, a1 as cubicOut, E as Emoji, w as validate_each_argument, e as element, a as space, t as text, D as empty, c as claim_element, b as children, g as detach_dev, f as claim_space, h as claim_text, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, a2 as prop_dev, n as set_data_dev, p as transition_in, r as transition_out, u as check_outros, R as create_in_transition, x as destroy_each, y as create_component, z as claim_component, A as mount_component, B as destroy_component, o as noop, O as query_selector_all, a3 as add_resize_listener, C as listen_dev, V as HtmlTag, q as group_outros } from './client.a7ceaf21.js';
import { T as Tag } from './Tag.e3d87680.js';

function is_date(obj) {
    return Object.prototype.toString.call(obj) === '[object Date]';
}

function get_interpolator(a, b) {
    if (a === b || a !== a)
        return () => a;
    const type = typeof a;
    if (type !== typeof b || Array.isArray(a) !== Array.isArray(b)) {
        throw new Error('Cannot interpolate values of different type');
    }
    if (Array.isArray(a)) {
        const arr = b.map((bi, i) => {
            return get_interpolator(a[i], bi);
        });
        return t => arr.map(fn => fn(t));
    }
    if (type === 'object') {
        if (!a || !b)
            throw new Error('Object cannot be null');
        if (is_date(a) && is_date(b)) {
            a = a.getTime();
            b = b.getTime();
            const delta = b - a;
            return t => new Date(a + t * delta);
        }
        const keys = Object.keys(b);
        const interpolators = {};
        keys.forEach(key => {
            interpolators[key] = get_interpolator(a[key], b[key]);
        });
        return t => {
            const result = {};
            keys.forEach(key => {
                result[key] = interpolators[key](t);
            });
            return result;
        };
    }
    if (type === 'number') {
        const delta = b - a;
        return t => a + t * delta;
    }
    throw new Error(`Cannot interpolate ${type} values`);
}
function tweened(value, defaults = {}) {
    const store = writable(value);
    let task;
    let target_value = value;
    function set(new_value, opts) {
        if (value == null) {
            store.set(value = new_value);
            return Promise.resolve();
        }
        target_value = new_value;
        let previous_task = task;
        let started = false;
        let { delay = 0, duration = 400, easing = identity, interpolate = get_interpolator } = assign(assign({}, defaults), opts);
        if (duration === 0) {
            if (previous_task) {
                previous_task.abort();
                previous_task = null;
            }
            store.set(value = target_value);
            return Promise.resolve();
        }
        const start = now() + delay;
        let fn;
        task = loop(now => {
            if (now < start)
                return true;
            if (!started) {
                fn = interpolate(value, new_value);
                if (typeof duration === 'function')
                    duration = duration(value, new_value);
                started = true;
            }
            if (previous_task) {
                previous_task.abort();
                previous_task = null;
            }
            const elapsed = now - start;
            if (elapsed > duration) {
                store.set(value = new_value);
                return false;
            }
            // @ts-ignore
            store.set(value = fn(easing(elapsed / duration)));
            return true;
        });
        return task.promise;
    }
    return {
        set,
        update: (fn, opts) => set(fn(target_value, value), opts),
        subscribe: store.subscribe
    };
}

/* src/routes/blog/[slug].svelte generated by Svelte v3.32.2 */
const file = "src/routes/blog/[slug].svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	return child_ctx;
}

// (174:2) {#if showAnimation}
function create_if_block(ctx) {
	let progress_1;
	let progress_1_intro;
	let t0;
	let p0;
	let a0;
	let t1;
	let t2;
	let a1;
	let t3;
	let t4;
	let a2;
	let t5_value = /*post*/ ctx[0].slug + "";
	let t5;
	let a2_href_value;
	let p0_intro;
	let t6;
	let h1;
	let t7_value = /*post*/ ctx[0].title + "";
	let t7;
	let t8;
	let t9_value = /*post*/ ctx[0].emoji + "";
	let t9;
	let h1_intro;
	let t10;
	let div;
	let p2;
	let html_tag;
	let raw_value = /*post*/ ctx[0].blurb + "";
	let t11;
	let t12;
	let span1;
	let span0;
	let t13;
	let p1;
	let t14_value = /*post*/ ctx[0].date + "";
	let t14;
	let div_intro;
	let t15;
	let if_block1_anchor;
	let current;
	let if_block0 = /*post*/ ctx[0].collaborators && create_if_block_2(ctx);
	let each_value = /*post*/ ctx[0].tags;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	let if_block1 = /*dataLoaded*/ ctx[3] && create_if_block_1(ctx);

	const block = {
		c: function create() {
			progress_1 = element("progress");
			t0 = space();
			p0 = element("p");
			a0 = element("a");
			t1 = text("home");
			t2 = text("\n      /\n      ");
			a1 = element("a");
			t3 = text("blog");
			t4 = text("\n      /\n      ");
			a2 = element("a");
			t5 = text(t5_value);
			t6 = space();
			h1 = element("h1");
			t7 = text(t7_value);
			t8 = space();
			t9 = text(t9_value);
			t10 = space();
			div = element("div");
			p2 = element("p");
			t11 = space();
			if (if_block0) if_block0.c();
			t12 = space();
			span1 = element("span");
			span0 = element("span");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t13 = space();
			p1 = element("p");
			t14 = text(t14_value);
			t15 = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			progress_1 = claim_element(nodes, "PROGRESS", { value: true, max: true, class: true });
			children(progress_1).forEach(detach_dev);
			t0 = claim_space(nodes);
			p0 = claim_element(nodes, "P", { class: true });
			var p0_nodes = children(p0);
			a0 = claim_element(p0_nodes, "A", { href: true });
			var a0_nodes = children(a0);
			t1 = claim_text(a0_nodes, "home");
			a0_nodes.forEach(detach_dev);
			t2 = claim_text(p0_nodes, "\n      /\n      ");
			a1 = claim_element(p0_nodes, "A", { href: true });
			var a1_nodes = children(a1);
			t3 = claim_text(a1_nodes, "blog");
			a1_nodes.forEach(detach_dev);
			t4 = claim_text(p0_nodes, "\n      /\n      ");
			a2 = claim_element(p0_nodes, "A", { href: true });
			var a2_nodes = children(a2);
			t5 = claim_text(a2_nodes, t5_value);
			a2_nodes.forEach(detach_dev);
			p0_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t7 = claim_text(h1_nodes, t7_value);
			t8 = claim_space(h1_nodes);
			t9 = claim_text(h1_nodes, t9_value);
			h1_nodes.forEach(detach_dev);
			t10 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			p2 = claim_element(div_nodes, "P", {});
			var p2_nodes = children(p2);
			t11 = claim_space(p2_nodes);
			if (if_block0) if_block0.l(p2_nodes);
			t12 = claim_space(p2_nodes);
			span1 = claim_element(p2_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			span0 = claim_element(span1_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(span0_nodes);
			}

			span0_nodes.forEach(detach_dev);
			t13 = claim_space(span1_nodes);
			p1 = claim_element(span1_nodes, "P", {});
			var p1_nodes = children(p1);
			t14 = claim_text(p1_nodes, t14_value);
			p1_nodes.forEach(detach_dev);
			span1_nodes.forEach(detach_dev);
			p2_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			t15 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			if_block1_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			progress_1.value = /*$progress*/ ctx[5];
			attr_dev(progress_1, "max", "100");
			attr_dev(progress_1, "class", "svelte-1nd7ur6");
			add_location(progress_1, file, 174, 4, 3875);
			attr_dev(a0, "href", "/");
			add_location(a0, file, 179, 6, 4038);
			attr_dev(a1, "href", "/blog/");
			add_location(a1, file, 181, 6, 4073);
			attr_dev(a2, "href", a2_href_value = "/blog/" + /*post*/ ctx[0].slug + "/");
			add_location(a2, file, 183, 6, 4113);
			attr_dev(p0, "class", "nav svelte-1nd7ur6");
			add_location(p0, file, 178, 4, 3976);
			attr_dev(h1, "class", "svelte-1nd7ur6");
			add_location(h1, file, 185, 4, 4171);
			html_tag = new HtmlTag(t11);
			attr_dev(span0, "class", "svelte-1nd7ur6");
			add_location(span0, file, 200, 10, 4707);
			add_location(p1, file, 205, 10, 4831);
			attr_dev(span1, "class", "tags svelte-1nd7ur6");
			add_location(span1, file, 199, 8, 4677);
			add_location(p2, file, 187, 6, 4326);
			attr_dev(div, "class", "subtitle svelte-1nd7ur6");
			add_location(div, file, 186, 4, 4250);
		},
		m: function mount(target, anchor) {
			insert_dev(target, progress_1, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, a0);
			append_dev(a0, t1);
			append_dev(p0, t2);
			append_dev(p0, a1);
			append_dev(a1, t3);
			append_dev(p0, t4);
			append_dev(p0, a2);
			append_dev(a2, t5);
			insert_dev(target, t6, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t7);
			append_dev(h1, t8);
			append_dev(h1, t9);
			insert_dev(target, t10, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, p2);
			html_tag.m(raw_value, p2);
			append_dev(p2, t11);
			if (if_block0) if_block0.m(p2, null);
			append_dev(p2, t12);
			append_dev(p2, span1);
			append_dev(span1, span0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(span0, null);
			}

			append_dev(span1, t13);
			append_dev(span1, p1);
			append_dev(p1, t14);
			insert_dev(target, t15, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, if_block1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*$progress*/ 32) {
				prop_dev(progress_1, "value", /*$progress*/ ctx[5]);
			}

			if ((!current || dirty & /*post*/ 1) && t5_value !== (t5_value = /*post*/ ctx[0].slug + "")) set_data_dev(t5, t5_value);

			if (!current || dirty & /*post*/ 1 && a2_href_value !== (a2_href_value = "/blog/" + /*post*/ ctx[0].slug + "/")) {
				attr_dev(a2, "href", a2_href_value);
			}

			if ((!current || dirty & /*post*/ 1) && t7_value !== (t7_value = /*post*/ ctx[0].title + "")) set_data_dev(t7, t7_value);
			if ((!current || dirty & /*post*/ 1) && t9_value !== (t9_value = /*post*/ ctx[0].emoji + "")) set_data_dev(t9, t9_value);
			if ((!current || dirty & /*post*/ 1) && raw_value !== (raw_value = /*post*/ ctx[0].blurb + "")) html_tag.p(raw_value);

			if (/*post*/ ctx[0].collaborators) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					if_block0.m(p2, t12);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*post*/ 1) {
				each_value = /*post*/ ctx[0].tags;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(span0, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if ((!current || dirty & /*post*/ 1) && t14_value !== (t14_value = /*post*/ ctx[0].date + "")) set_data_dev(t14, t14_value);

			if (/*dataLoaded*/ ctx[3]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*dataLoaded*/ 8) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i: function intro(local) {
			if (current) return;

			if (!progress_1_intro) {
				add_render_callback(() => {
					progress_1_intro = create_in_transition(progress_1, fade, { delay: 500, duration: 0 });
					progress_1_intro.start();
				});
			}

			if (!p0_intro) {
				add_render_callback(() => {
					p0_intro = create_in_transition(p0, fade, { delay: 200, duration: 500 });
					p0_intro.start();
				});
			}

			if (!h1_intro) {
				add_render_callback(() => {
					h1_intro = create_in_transition(h1, fade, { delay: 200, duration: 500 });
					h1_intro.start();
				});
			}

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			if (!div_intro) {
				add_render_callback(() => {
					div_intro = create_in_transition(div, fly, { delay: 250, x: -50, duration: 500 });
					div_intro.start();
				});
			}

			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(progress_1);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t10);
			if (detaching) detach_dev(div);
			if (if_block0) if_block0.d();
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t15);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(if_block1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(174:2) {#if showAnimation}",
		ctx
	});

	return block;
}

// (190:8) {#if post.collaborators}
function create_if_block_2(ctx) {
	let span;
	let each_value_1 = /*post*/ ctx[0].collaborators;
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			span = element("span");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(span_nodes);
			}

			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "collab svelte-1nd7ur6");
			add_location(span, file, 190, 10, 4400);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(span, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*post*/ 1) {
				each_value_1 = /*post*/ ctx[0].collaborators;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(span, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(190:8) {#if post.collaborators}",
		ctx
	});

	return block;
}

// (192:12) {#each post.collaborators as collab}
function create_each_block_1(ctx) {
	let a;
	let t0;
	let t1_value = /*collab*/ ctx[13] + "";
	let t1;
	let a_href_value;
	let t2;

	const block = {
		c: function create() {
			a = element("a");
			t0 = text("@");
			t1 = text(t1_value);
			t2 = text("\n               ");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { "aria-label": true, href: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, "@");
			t1 = claim_text(a_nodes, t1_value);
			a_nodes.forEach(detach_dev);
			t2 = claim_text(nodes, "\n               ");
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "aria-label", "collaborator");
			attr_dev(a, "href", a_href_value = "https://github.com/" + /*collab*/ ctx[13] + "/");
			add_location(a, file, 192, 14, 4485);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t0);
			append_dev(a, t1);
			insert_dev(target, t2, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*post*/ 1 && t1_value !== (t1_value = /*collab*/ ctx[13] + "")) set_data_dev(t1, t1_value);

			if (dirty & /*post*/ 1 && a_href_value !== (a_href_value = "https://github.com/" + /*collab*/ ctx[13] + "/")) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			if (detaching) detach_dev(t2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(192:12) {#each post.collaborators as collab}",
		ctx
	});

	return block;
}

// (202:12) {#each post.tags as tagId}
function create_each_block(ctx) {
	let tag;
	let current;

	tag = new Tag({
			props: { tagId: /*tagId*/ ctx[10] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(tag.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(tag.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(tag, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const tag_changes = {};
			if (dirty & /*post*/ 1) tag_changes.tagId = /*tagId*/ ctx[10];
			tag.$set(tag_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tag.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tag.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(tag, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(202:12) {#each post.tags as tagId}",
		ctx
	});

	return block;
}

// (210:4) {#if dataLoaded}
function create_if_block_1(ctx) {
	let div;
	let raw_value = /*post*/ ctx[0].html + "";
	let div_intro;

	const block = {
		c: function create() {
			div = element("div");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "content svelte-1nd7ur6");
			add_location(div, file, 210, 6, 4915);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			div.innerHTML = raw_value;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*post*/ 1 && raw_value !== (raw_value = /*post*/ ctx[0].html + "")) div.innerHTML = raw_value;		},
		i: function intro(local) {
			if (!div_intro) {
				add_render_callback(() => {
					div_intro = create_in_transition(div, fly, { delay: 200, y: 50, duration: 500 });
					div_intro.start();
				});
			}
		},
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(210:4) {#if dataLoaded}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let scrolling = false;

	let clear_scrolling = () => {
		scrolling = false;
	};

	let scrolling_timeout;
	let div;
	let div_resize_listener;
	let t;
	let title_value;
	let link;
	let link_href_value;
	let meta0;
	let meta0_content_value;
	let meta1;
	let meta2;
	let meta3;
	let meta3_content_value;
	let meta4;
	let meta4_content_value;
	let meta5;
	let meta5_content_value;
	let meta6;
	let meta7;
	let meta8;
	let meta8_content_value;
	let meta9;
	let meta9_content_value;
	let meta10;
	let meta10_content_value;
	let meta11;
	let current;
	let mounted;
	let dispose;
	add_render_callback(/*onwindowscroll*/ ctx[8]);
	let if_block = /*showAnimation*/ ctx[4] && create_if_block(ctx);
	document.title = title_value = "" + (/*post*/ ctx[0].emoji + /*post*/ ctx[0].title + " - Cameron Raymond" + /*post*/ ctx[0].emoji);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			link = element("link");
			meta0 = element("meta");
			meta1 = element("meta");
			meta2 = element("meta");
			meta3 = element("meta");
			meta4 = element("meta");
			meta5 = element("meta");
			meta6 = element("meta");
			meta7 = element("meta");
			meta8 = element("meta");
			meta9 = element("meta");
			meta10 = element("meta");
			meta11 = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			const head_nodes = query_selector_all("[data-svelte=\"svelte-mwgi0n\"]", document.head);
			link = claim_element(head_nodes, "LINK", { rel: true, href: true });
			meta0 = claim_element(head_nodes, "META", { name: true, content: true });
			meta1 = claim_element(head_nodes, "META", { name: true, content: true });
			meta2 = claim_element(head_nodes, "META", { property: true, content: true });
			meta3 = claim_element(head_nodes, "META", { property: true, content: true });
			meta4 = claim_element(head_nodes, "META", { property: true, content: true });
			meta5 = claim_element(head_nodes, "META", { name: true, content: true });
			meta6 = claim_element(head_nodes, "META", { property: true, content: true });
			meta7 = claim_element(head_nodes, "META", { property: true, content: true });
			meta8 = claim_element(head_nodes, "META", { property: true, content: true });
			meta9 = claim_element(head_nodes, "META", { property: true, content: true });
			meta10 = claim_element(head_nodes, "META", { property: true, content: true });
			meta11 = claim_element(head_nodes, "META", { property: true, content: true });
			head_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_render_callback(() => /*div_elementresize_handler*/ ctx[9].call(div));
			add_location(div, file, 172, 0, 3821);
			attr_dev(link, "rel", "canonical");
			attr_dev(link, "href", link_href_value = "https://cameronraymond.me/blog/" + /*post*/ ctx[0].slug + "/");
			add_location(link, file, 219, 2, 5136);
			attr_dev(meta0, "name", "description");
			attr_dev(meta0, "content", meta0_content_value = /*post*/ ctx[0].blurb);
			add_location(meta0, file, 220, 2, 5214);
			attr_dev(meta1, "name", "keywords");
			attr_dev(meta1, "content", "Cameron Raymond, University of Oxford, Oxford University, Data\n    Science, Social Data Sience, Data Scientist");
			add_location(meta1, file, 221, 2, 5265);
			attr_dev(meta2, "property", "og:type");
			attr_dev(meta2, "content", "website");
			add_location(meta2, file, 227, 2, 5455);
			attr_dev(meta3, "property", "og:url");
			attr_dev(meta3, "content", meta3_content_value = "https://cameronraymond.me/blog/" + /*post*/ ctx[0].slug + "/");
			add_location(meta3, file, 228, 2, 5503);
			attr_dev(meta4, "property", "og:title");
			attr_dev(meta4, "content", meta4_content_value = "" + (/*post*/ ctx[0].emoji + /*post*/ ctx[0].title + " - Cameron Raymond" + /*post*/ ctx[0].emoji));
			add_location(meta4, file, 231, 2, 5594);
			attr_dev(meta5, "name", "og:description");
			attr_dev(meta5, "content", meta5_content_value = /*post*/ ctx[0].blurb);
			add_location(meta5, file, 234, 2, 5698);
			attr_dev(meta6, "property", "og:image");
			attr_dev(meta6, "content", "https://cameronraymond.me/networkd.png");
			add_location(meta6, file, 235, 2, 5752);
			attr_dev(meta7, "property", "twitter:card");
			attr_dev(meta7, "content", "summary");
			add_location(meta7, file, 238, 2, 5852);
			attr_dev(meta8, "property", "twitter:url");
			attr_dev(meta8, "content", meta8_content_value = "https://cameronraymond.me/blog/" + /*post*/ ctx[0].slug + "/");
			add_location(meta8, file, 239, 2, 5905);
			attr_dev(meta9, "property", "twitter:title");
			attr_dev(meta9, "content", meta9_content_value = "" + (/*post*/ ctx[0].emoji + /*post*/ ctx[0].title + " - Cameron Raymond" + /*post*/ ctx[0].emoji));
			add_location(meta9, file, 242, 2, 6001);
			attr_dev(meta10, "property", "twitter:description");
			attr_dev(meta10, "content", meta10_content_value = /*post*/ ctx[0].blurb);
			add_location(meta10, file, 245, 2, 6110);
			attr_dev(meta11, "property", "twitter:image");
			attr_dev(meta11, "content", "https://cameronraymond.me/networkd.png");
			add_location(meta11, file, 246, 2, 6173);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
			div_resize_listener = add_resize_listener(div, /*div_elementresize_handler*/ ctx[9].bind(div));
			insert_dev(target, t, anchor);
			append_dev(document.head, link);
			append_dev(document.head, meta0);
			append_dev(document.head, meta1);
			append_dev(document.head, meta2);
			append_dev(document.head, meta3);
			append_dev(document.head, meta4);
			append_dev(document.head, meta5);
			append_dev(document.head, meta6);
			append_dev(document.head, meta7);
			append_dev(document.head, meta8);
			append_dev(document.head, meta9);
			append_dev(document.head, meta10);
			append_dev(document.head, meta11);
			current = true;

			if (!mounted) {
				dispose = listen_dev(window, "scroll", () => {
					scrolling = true;
					clearTimeout(scrolling_timeout);
					scrolling_timeout = setTimeout(clear_scrolling, 100);
					/*onwindowscroll*/ ctx[8]();
				});

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*y*/ 2 && !scrolling) {
				scrolling = true;
				clearTimeout(scrolling_timeout);
				scrollTo(window.pageXOffset, /*y*/ ctx[1]);
				scrolling_timeout = setTimeout(clear_scrolling, 100);
			}

			if (/*showAnimation*/ ctx[4]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*showAnimation*/ 16) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if ((!current || dirty & /*post*/ 1) && title_value !== (title_value = "" + (/*post*/ ctx[0].emoji + /*post*/ ctx[0].title + " - Cameron Raymond" + /*post*/ ctx[0].emoji))) {
				document.title = title_value;
			}

			if (!current || dirty & /*post*/ 1 && link_href_value !== (link_href_value = "https://cameronraymond.me/blog/" + /*post*/ ctx[0].slug + "/")) {
				attr_dev(link, "href", link_href_value);
			}

			if (!current || dirty & /*post*/ 1 && meta0_content_value !== (meta0_content_value = /*post*/ ctx[0].blurb)) {
				attr_dev(meta0, "content", meta0_content_value);
			}

			if (!current || dirty & /*post*/ 1 && meta3_content_value !== (meta3_content_value = "https://cameronraymond.me/blog/" + /*post*/ ctx[0].slug + "/")) {
				attr_dev(meta3, "content", meta3_content_value);
			}

			if (!current || dirty & /*post*/ 1 && meta4_content_value !== (meta4_content_value = "" + (/*post*/ ctx[0].emoji + /*post*/ ctx[0].title + " - Cameron Raymond" + /*post*/ ctx[0].emoji))) {
				attr_dev(meta4, "content", meta4_content_value);
			}

			if (!current || dirty & /*post*/ 1 && meta5_content_value !== (meta5_content_value = /*post*/ ctx[0].blurb)) {
				attr_dev(meta5, "content", meta5_content_value);
			}

			if (!current || dirty & /*post*/ 1 && meta8_content_value !== (meta8_content_value = "https://cameronraymond.me/blog/" + /*post*/ ctx[0].slug + "/")) {
				attr_dev(meta8, "content", meta8_content_value);
			}

			if (!current || dirty & /*post*/ 1 && meta9_content_value !== (meta9_content_value = "" + (/*post*/ ctx[0].emoji + /*post*/ ctx[0].title + " - Cameron Raymond" + /*post*/ ctx[0].emoji))) {
				attr_dev(meta9, "content", meta9_content_value);
			}

			if (!current || dirty & /*post*/ 1 && meta10_content_value !== (meta10_content_value = /*post*/ ctx[0].blurb)) {
				attr_dev(meta10, "content", meta10_content_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
			div_resize_listener();
			if (detaching) detach_dev(t);
			detach_dev(link);
			detach_dev(meta0);
			detach_dev(meta1);
			detach_dev(meta2);
			detach_dev(meta3);
			detach_dev(meta4);
			detach_dev(meta5);
			detach_dev(meta6);
			detach_dev(meta7);
			detach_dev(meta8);
			detach_dev(meta9);
			detach_dev(meta10);
			detach_dev(meta11);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload({ params, query }) {
	// the `slug` parameter is available because
	// this file is called [slug].svelte
	const res = await this.fetch(`blog/${params.slug}.json`);

	const data = await res.json();

	if (res.status === 200) {
		return { post: data };
	} else {
		this.error(res.status, data.message);
	}
}

function instance($$self, $$props, $$invalidate) {
	let percDone;
	let $progress;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("U5Bslugu5D", slots, []);
	let { post } = $$props;
	const progress = tweened(0, { duration: 500, easing: cubicOut });
	validate_store(progress, "progress");
	component_subscribe($$self, progress, value => $$invalidate(5, $progress = value));
	let y = 0;
	let h = 1000;
	let dataLoaded = false;
	let showAnimation = false;

	onMount(async () => {
		$$invalidate(4, showAnimation = true);

		if (post.html == false) {
			const url = "/.netlify/functions/post?link=" + post.mediumURL;
			const postRes = await fetch(url);
			const html = await postRes.json();
			$$invalidate(0, post.html = html.html, post);
		}

		$$invalidate(3, dataLoaded = true);
	});

	const writable_props = ["post"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<U5Bslugu5D> was created with unknown prop '${key}'`);
	});

	function onwindowscroll() {
		$$invalidate(1, y = window.pageYOffset);
	}

	function div_elementresize_handler() {
		h = this.clientHeight;
		$$invalidate(2, h);
	}

	$$self.$$set = $$props => {
		if ("post" in $$props) $$invalidate(0, post = $$props.post);
	};

	$$self.$capture_state = () => ({
		preload,
		onMount,
		fly,
		fade,
		tweened,
		cubicOut,
		Emoji,
		Tag,
		post,
		progress,
		y,
		h,
		dataLoaded,
		showAnimation,
		percDone,
		$progress
	});

	$$self.$inject_state = $$props => {
		if ("post" in $$props) $$invalidate(0, post = $$props.post);
		if ("y" in $$props) $$invalidate(1, y = $$props.y);
		if ("h" in $$props) $$invalidate(2, h = $$props.h);
		if ("dataLoaded" in $$props) $$invalidate(3, dataLoaded = $$props.dataLoaded);
		if ("showAnimation" in $$props) $$invalidate(4, showAnimation = $$props.showAnimation);
		if ("percDone" in $$props) $$invalidate(7, percDone = $$props.percDone);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*y, h*/ 6) {
			// take 500 off of the height to roughly account for header/footer, shift y by 100 so that it starts after header
			 $$invalidate(7, percDone = (y - 100) / (h - 500) * 100);
		}

		if ($$self.$$.dirty & /*percDone*/ 128) {
			 {
				progress.set(percDone > 95 ? 100 : Math.max(percDone, 0));
			}
		}
	};

	return [
		post,
		y,
		h,
		dataLoaded,
		showAnimation,
		$progress,
		progress,
		percDone,
		onwindowscroll,
		div_elementresize_handler
	];
}

class U5Bslugu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { post: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bslugu5D",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*post*/ ctx[0] === undefined && !("post" in props)) {
			console.warn("<U5Bslugu5D> was created without expected prop 'post'");
		}
	}

	get post() {
		throw new Error("<U5Bslugu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set post(value) {
		throw new Error("<U5Bslugu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bslugu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiW3NsdWddLjEzNWU1MDQ0LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZlbHRlL21vdGlvbi9pbmRleC5tanMiLCIuLi8uLi8uLi9zcmMvcm91dGVzL2Jsb2cvW3NsdWddLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3cml0YWJsZSB9IGZyb20gJy4uL3N0b3JlL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBub3csIGxvb3AsIGFzc2lnbiB9IGZyb20gJy4uL2ludGVybmFsL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBsaW5lYXIgfSBmcm9tICcuLi9lYXNpbmcvaW5kZXgubWpzJztcblxuZnVuY3Rpb24gaXNfZGF0ZShvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuZnVuY3Rpb24gdGlja19zcHJpbmcoY3R4LCBsYXN0X3ZhbHVlLCBjdXJyZW50X3ZhbHVlLCB0YXJnZXRfdmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIGN1cnJlbnRfdmFsdWUgPT09ICdudW1iZXInIHx8IGlzX2RhdGUoY3VycmVudF92YWx1ZSkpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjb25zdCBkZWx0YSA9IHRhcmdldF92YWx1ZSAtIGN1cnJlbnRfdmFsdWU7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY29uc3QgdmVsb2NpdHkgPSAoY3VycmVudF92YWx1ZSAtIGxhc3RfdmFsdWUpIC8gKGN0eC5kdCB8fCAxIC8gNjApOyAvLyBndWFyZCBkaXYgYnkgMFxuICAgICAgICBjb25zdCBzcHJpbmcgPSBjdHgub3B0cy5zdGlmZm5lc3MgKiBkZWx0YTtcbiAgICAgICAgY29uc3QgZGFtcGVyID0gY3R4Lm9wdHMuZGFtcGluZyAqIHZlbG9jaXR5O1xuICAgICAgICBjb25zdCBhY2NlbGVyYXRpb24gPSAoc3ByaW5nIC0gZGFtcGVyKSAqIGN0eC5pbnZfbWFzcztcbiAgICAgICAgY29uc3QgZCA9ICh2ZWxvY2l0eSArIGFjY2VsZXJhdGlvbikgKiBjdHguZHQ7XG4gICAgICAgIGlmIChNYXRoLmFicyhkKSA8IGN0eC5vcHRzLnByZWNpc2lvbiAmJiBNYXRoLmFicyhkZWx0YSkgPCBjdHgub3B0cy5wcmVjaXNpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXRfdmFsdWU7IC8vIHNldHRsZWRcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGN0eC5zZXR0bGVkID0gZmFsc2U7IC8vIHNpZ25hbCBsb29wIHRvIGtlZXAgdGlja2luZ1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgcmV0dXJuIGlzX2RhdGUoY3VycmVudF92YWx1ZSkgP1xuICAgICAgICAgICAgICAgIG5ldyBEYXRlKGN1cnJlbnRfdmFsdWUuZ2V0VGltZSgpICsgZCkgOiBjdXJyZW50X3ZhbHVlICsgZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGN1cnJlbnRfdmFsdWUpKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRfdmFsdWUubWFwKChfLCBpKSA9PiB0aWNrX3NwcmluZyhjdHgsIGxhc3RfdmFsdWVbaV0sIGN1cnJlbnRfdmFsdWVbaV0sIHRhcmdldF92YWx1ZVtpXSkpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgY3VycmVudF92YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgY29uc3QgbmV4dF92YWx1ZSA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGsgaW4gY3VycmVudF92YWx1ZSkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgbmV4dF92YWx1ZVtrXSA9IHRpY2tfc3ByaW5nKGN0eCwgbGFzdF92YWx1ZVtrXSwgY3VycmVudF92YWx1ZVtrXSwgdGFyZ2V0X3ZhbHVlW2tdKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJldHVybiBuZXh0X3ZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3Qgc3ByaW5nICR7dHlwZW9mIGN1cnJlbnRfdmFsdWV9IHZhbHVlc2ApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNwcmluZyh2YWx1ZSwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3Qgc3RvcmUgPSB3cml0YWJsZSh2YWx1ZSk7XG4gICAgY29uc3QgeyBzdGlmZm5lc3MgPSAwLjE1LCBkYW1waW5nID0gMC44LCBwcmVjaXNpb24gPSAwLjAxIH0gPSBvcHRzO1xuICAgIGxldCBsYXN0X3RpbWU7XG4gICAgbGV0IHRhc2s7XG4gICAgbGV0IGN1cnJlbnRfdG9rZW47XG4gICAgbGV0IGxhc3RfdmFsdWUgPSB2YWx1ZTtcbiAgICBsZXQgdGFyZ2V0X3ZhbHVlID0gdmFsdWU7XG4gICAgbGV0IGludl9tYXNzID0gMTtcbiAgICBsZXQgaW52X21hc3NfcmVjb3ZlcnlfcmF0ZSA9IDA7XG4gICAgbGV0IGNhbmNlbF90YXNrID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gc2V0KG5ld192YWx1ZSwgb3B0cyA9IHt9KSB7XG4gICAgICAgIHRhcmdldF92YWx1ZSA9IG5ld192YWx1ZTtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBjdXJyZW50X3Rva2VuID0ge307XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IG9wdHMuaGFyZCB8fCAoc3ByaW5nLnN0aWZmbmVzcyA+PSAxICYmIHNwcmluZy5kYW1waW5nID49IDEpKSB7XG4gICAgICAgICAgICBjYW5jZWxfdGFzayA9IHRydWU7IC8vIGNhbmNlbCBhbnkgcnVubmluZyBhbmltYXRpb25cbiAgICAgICAgICAgIGxhc3RfdGltZSA9IG5vdygpO1xuICAgICAgICAgICAgbGFzdF92YWx1ZSA9IG5ld192YWx1ZTtcbiAgICAgICAgICAgIHN0b3JlLnNldCh2YWx1ZSA9IHRhcmdldF92YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3B0cy5zb2Z0KSB7XG4gICAgICAgICAgICBjb25zdCByYXRlID0gb3B0cy5zb2Z0ID09PSB0cnVlID8gLjUgOiArb3B0cy5zb2Z0O1xuICAgICAgICAgICAgaW52X21hc3NfcmVjb3ZlcnlfcmF0ZSA9IDEgLyAocmF0ZSAqIDYwKTtcbiAgICAgICAgICAgIGludl9tYXNzID0gMDsgLy8gaW5maW5pdGUgbWFzcywgdW5hZmZlY3RlZCBieSBzcHJpbmcgZm9yY2VzXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0YXNrKSB7XG4gICAgICAgICAgICBsYXN0X3RpbWUgPSBub3coKTtcbiAgICAgICAgICAgIGNhbmNlbF90YXNrID0gZmFsc2U7XG4gICAgICAgICAgICB0YXNrID0gbG9vcChub3cgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjYW5jZWxfdGFzaykge1xuICAgICAgICAgICAgICAgICAgICBjYW5jZWxfdGFzayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0YXNrID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbnZfbWFzcyA9IE1hdGgubWluKGludl9tYXNzICsgaW52X21hc3NfcmVjb3ZlcnlfcmF0ZSwgMSk7XG4gICAgICAgICAgICAgICAgY29uc3QgY3R4ID0ge1xuICAgICAgICAgICAgICAgICAgICBpbnZfbWFzcyxcbiAgICAgICAgICAgICAgICAgICAgb3B0czogc3ByaW5nLFxuICAgICAgICAgICAgICAgICAgICBzZXR0bGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBkdDogKG5vdyAtIGxhc3RfdGltZSkgKiA2MCAvIDEwMDBcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRfdmFsdWUgPSB0aWNrX3NwcmluZyhjdHgsIGxhc3RfdmFsdWUsIHZhbHVlLCB0YXJnZXRfdmFsdWUpO1xuICAgICAgICAgICAgICAgIGxhc3RfdGltZSA9IG5vdztcbiAgICAgICAgICAgICAgICBsYXN0X3ZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgc3RvcmUuc2V0KHZhbHVlID0gbmV4dF92YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGN0eC5zZXR0bGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhc2sgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gIWN0eC5zZXR0bGVkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bGZpbCA9PiB7XG4gICAgICAgICAgICB0YXNrLnByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRva2VuID09PSBjdXJyZW50X3Rva2VuKVxuICAgICAgICAgICAgICAgICAgICBmdWxmaWwoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3Qgc3ByaW5nID0ge1xuICAgICAgICBzZXQsXG4gICAgICAgIHVwZGF0ZTogKGZuLCBvcHRzKSA9PiBzZXQoZm4odGFyZ2V0X3ZhbHVlLCB2YWx1ZSksIG9wdHMpLFxuICAgICAgICBzdWJzY3JpYmU6IHN0b3JlLnN1YnNjcmliZSxcbiAgICAgICAgc3RpZmZuZXNzLFxuICAgICAgICBkYW1waW5nLFxuICAgICAgICBwcmVjaXNpb25cbiAgICB9O1xuICAgIHJldHVybiBzcHJpbmc7XG59XG5cbmZ1bmN0aW9uIGdldF9pbnRlcnBvbGF0b3IoYSwgYikge1xuICAgIGlmIChhID09PSBiIHx8IGEgIT09IGEpXG4gICAgICAgIHJldHVybiAoKSA9PiBhO1xuICAgIGNvbnN0IHR5cGUgPSB0eXBlb2YgYTtcbiAgICBpZiAodHlwZSAhPT0gdHlwZW9mIGIgfHwgQXJyYXkuaXNBcnJheShhKSAhPT0gQXJyYXkuaXNBcnJheShiKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBpbnRlcnBvbGF0ZSB2YWx1ZXMgb2YgZGlmZmVyZW50IHR5cGUnKTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICAgICAgY29uc3QgYXJyID0gYi5tYXAoKGJpLCBpKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0X2ludGVycG9sYXRvcihhW2ldLCBiaSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdCA9PiBhcnIubWFwKGZuID0+IGZuKHQpKTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmICghYSB8fCAhYilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignT2JqZWN0IGNhbm5vdCBiZSBudWxsJyk7XG4gICAgICAgIGlmIChpc19kYXRlKGEpICYmIGlzX2RhdGUoYikpIHtcbiAgICAgICAgICAgIGEgPSBhLmdldFRpbWUoKTtcbiAgICAgICAgICAgIGIgPSBiLmdldFRpbWUoKTtcbiAgICAgICAgICAgIGNvbnN0IGRlbHRhID0gYiAtIGE7XG4gICAgICAgICAgICByZXR1cm4gdCA9PiBuZXcgRGF0ZShhICsgdCAqIGRlbHRhKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYik7XG4gICAgICAgIGNvbnN0IGludGVycG9sYXRvcnMgPSB7fTtcbiAgICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICBpbnRlcnBvbGF0b3JzW2tleV0gPSBnZXRfaW50ZXJwb2xhdG9yKGFba2V5XSwgYltrZXldKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgICAgICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBpbnRlcnBvbGF0b3JzW2tleV0odCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25zdCBkZWx0YSA9IGIgLSBhO1xuICAgICAgICByZXR1cm4gdCA9PiBhICsgdCAqIGRlbHRhO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBpbnRlcnBvbGF0ZSAke3R5cGV9IHZhbHVlc2ApO1xufVxuZnVuY3Rpb24gdHdlZW5lZCh2YWx1ZSwgZGVmYXVsdHMgPSB7fSkge1xuICAgIGNvbnN0IHN0b3JlID0gd3JpdGFibGUodmFsdWUpO1xuICAgIGxldCB0YXNrO1xuICAgIGxldCB0YXJnZXRfdmFsdWUgPSB2YWx1ZTtcbiAgICBmdW5jdGlvbiBzZXQobmV3X3ZhbHVlLCBvcHRzKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBzdG9yZS5zZXQodmFsdWUgPSBuZXdfdmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldF92YWx1ZSA9IG5ld192YWx1ZTtcbiAgICAgICAgbGV0IHByZXZpb3VzX3Rhc2sgPSB0YXNrO1xuICAgICAgICBsZXQgc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gNDAwLCBlYXNpbmcgPSBsaW5lYXIsIGludGVycG9sYXRlID0gZ2V0X2ludGVycG9sYXRvciB9ID0gYXNzaWduKGFzc2lnbih7fSwgZGVmYXVsdHMpLCBvcHRzKTtcbiAgICAgICAgaWYgKGR1cmF0aW9uID09PSAwKSB7XG4gICAgICAgICAgICBpZiAocHJldmlvdXNfdGFzaykge1xuICAgICAgICAgICAgICAgIHByZXZpb3VzX3Rhc2suYWJvcnQoKTtcbiAgICAgICAgICAgICAgICBwcmV2aW91c190YXNrID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0b3JlLnNldCh2YWx1ZSA9IHRhcmdldF92YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhcnQgPSBub3coKSArIGRlbGF5O1xuICAgICAgICBsZXQgZm47XG4gICAgICAgIHRhc2sgPSBsb29wKG5vdyA9PiB7XG4gICAgICAgICAgICBpZiAobm93IDwgc3RhcnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBpZiAoIXN0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICBmbiA9IGludGVycG9sYXRlKHZhbHVlLCBuZXdfdmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZHVyYXRpb24gPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gZHVyYXRpb24odmFsdWUsIG5ld192YWx1ZSk7XG4gICAgICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJldmlvdXNfdGFzaykge1xuICAgICAgICAgICAgICAgIHByZXZpb3VzX3Rhc2suYWJvcnQoKTtcbiAgICAgICAgICAgICAgICBwcmV2aW91c190YXNrID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGVsYXBzZWQgPSBub3cgLSBzdGFydDtcbiAgICAgICAgICAgIGlmIChlbGFwc2VkID4gZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBzdG9yZS5zZXQodmFsdWUgPSBuZXdfdmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHN0b3JlLnNldCh2YWx1ZSA9IGZuKGVhc2luZyhlbGFwc2VkIC8gZHVyYXRpb24pKSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0YXNrLnByb21pc2U7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHNldCxcbiAgICAgICAgdXBkYXRlOiAoZm4sIG9wdHMpID0+IHNldChmbih0YXJnZXRfdmFsdWUsIHZhbHVlKSwgb3B0cyksXG4gICAgICAgIHN1YnNjcmliZTogc3RvcmUuc3Vic2NyaWJlXG4gICAgfTtcbn1cblxuZXhwb3J0IHsgc3ByaW5nLCB0d2VlbmVkIH07XG4iLCI8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cbiAgZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZWxvYWQoeyBwYXJhbXMsIHF1ZXJ5IH0pIHtcbiAgICAvLyB0aGUgYHNsdWdgIHBhcmFtZXRlciBpcyBhdmFpbGFibGUgYmVjYXVzZVxuICAgIC8vIHRoaXMgZmlsZSBpcyBjYWxsZWQgW3NsdWddLnN2ZWx0ZVxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZmV0Y2goYGJsb2cvJHtwYXJhbXMuc2x1Z30uanNvbmApO1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xuICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgIHJldHVybiB7IHBvc3Q6IGRhdGEgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lcnJvcihyZXMuc3RhdHVzLCBkYXRhLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQ+XG4gIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG4gIGltcG9ydCB7IGZseSwgZmFkZSB9IGZyb20gXCJzdmVsdGUvdHJhbnNpdGlvblwiO1xuICBpbXBvcnQgeyB0d2VlbmVkIH0gZnJvbSBcInN2ZWx0ZS9tb3Rpb25cIjtcbiAgaW1wb3J0IHsgY3ViaWNPdXQgfSBmcm9tIFwic3ZlbHRlL2Vhc2luZ1wiO1xuICBpbXBvcnQgRW1vamkgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvRW1vamkuc3ZlbHRlXCI7XG4gIGltcG9ydCBUYWcgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvVGFnLnN2ZWx0ZVwiO1xuICBleHBvcnQgbGV0IHBvc3Q7XG4gIGNvbnN0IHByb2dyZXNzID0gdHdlZW5lZCgwLCB7XG4gICAgZHVyYXRpb246IDUwMCxcbiAgICBlYXNpbmc6IGN1YmljT3V0XG4gIH0pO1xuICBsZXQgeSA9IDA7XG4gIGxldCBoID0gMTAwMDtcbiAgbGV0IGRhdGFMb2FkZWQgPSBmYWxzZTtcbiAgbGV0IHNob3dBbmltYXRpb24gPSBmYWxzZTtcbiAgLy8gdGFrZSA1MDAgb2ZmIG9mIHRoZSBoZWlnaHQgdG8gcm91Z2hseSBhY2NvdW50IGZvciBoZWFkZXIvZm9vdGVyLCBzaGlmdCB5IGJ5IDEwMCBzbyB0aGF0IGl0IHN0YXJ0cyBhZnRlciBoZWFkZXJcbiAgJDogcGVyY0RvbmUgPSAoKHkgLSAxMDApIC8gKGggLSA1MDApKSAqIDEwMDtcbiAgJDoge1xuICAgIHByb2dyZXNzLnNldChwZXJjRG9uZSA+IDk1ID8gMTAwIDogTWF0aC5tYXgocGVyY0RvbmUsIDApKTtcbiAgfVxuXG4gIG9uTW91bnQoYXN5bmMgKCkgPT4ge1xuICAgIHNob3dBbmltYXRpb24gPSB0cnVlO1xuICAgIGlmIChwb3N0Lmh0bWwgPT0gZmFsc2UpIHtcbiAgICAgIGNvbnN0IHVybCA9IFwiLy5uZXRsaWZ5L2Z1bmN0aW9ucy9wb3N0P2xpbms9XCIgKyBwb3N0Lm1lZGl1bVVSTDtcbiAgICAgIGNvbnN0IHBvc3RSZXMgPSBhd2FpdCBmZXRjaCh1cmwpO1xuICAgICAgY29uc3QgaHRtbCA9IGF3YWl0IHBvc3RSZXMuanNvbigpO1xuICAgICAgcG9zdC5odG1sID0gaHRtbC5odG1sO1xuICAgIH1cbiAgICBkYXRhTG9hZGVkID0gdHJ1ZTtcbiAgfSk7XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuICAvKlxuXHRcdEJ5IGRlZmF1bHQsIENTUyBpcyBsb2NhbGx5IHNjb3BlZCB0byB0aGUgY29tcG9uZW50LFxuXHRcdGFuZCBhbnkgdW51c2VkIHN0eWxlcyBhcmUgZGVhZC1jb2RlLWVsaW1pbmF0ZWQuXG5cdFx0SW4gdGhpcyBwYWdlLCBTdmVsdGUgY2FuJ3Qga25vdyB3aGljaCBlbGVtZW50cyBhcmVcblx0XHRnb2luZyB0byBhcHBlYXIgaW5zaWRlIHRoZSB7e3twb3N0Lmh0bWx9fX0gYmxvY2ssXG5cdFx0c28gd2UgaGF2ZSB0byB1c2UgdGhlIDpnbG9iYWwoLi4uKSBtb2RpZmllciB0byB0YXJnZXRcblx0XHRhbGwgZWxlbWVudHMgaW5zaWRlIC5jb250ZW50XG5cdCovXG4gIC5jb250ZW50IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgbWFyZ2luOiBhdXRvO1xuICAgIHdpZHRoOiA4MHZ3O1xuICAgIG1heC13aWR0aDogNDByZW07XG4gIH1cbiAgLmNvbnRlbnQgOmdsb2JhbChjb2RlKSB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG92ZXJmbG93OiBhdXRvO1xuICB9XG4gIC5jb250ZW50IDpnbG9iYWwoaW1nOmZpcnN0LW9mLXR5cGUpIHtcbiAgICBtYXgtaGVpZ2h0OiBpbml0aWFsO1xuICB9XG4gIC5jb250ZW50IDpnbG9iYWwoaW1nKSB7XG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xuICAgIG1hcmdpbjogMXJlbSBhdXRvIDAuMXJlbSBhdXRvO1xuICAgIHdpZHRoOiBhdXRvO1xuICAgIGhlaWdodDogYXV0bztcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgbWF4LWhlaWdodDogMzByZW07XG4gIH1cbiAgLmNvbnRlbnQgOmdsb2JhbChoMikge1xuICAgIG1hcmdpbi10b3A6IDEuNXJlbTtcbiAgfVxuICAuY29udGVudCA6Z2xvYmFsKGgzKSB7XG4gICAgbWFyZ2luLXRvcDogMXJlbTtcbiAgfVxuICAuY29udGVudCA6Z2xvYmFsKGVtKSB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGNvbG9yOiAjNTU1O1xuICB9XG4gIC5jb250ZW50IDpnbG9iYWwocCA+IGVtKSB7XG4gICAgY29sb3I6IGluaGVyaXQ7XG4gIH1cbiAgLmNvbnRlbnQgOmdsb2JhbCh1bCkge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBsaXN0LXN0eWxlOiBub25lO1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIHBhZGRpbmctbGVmdDogMS4yZW07XG4gIH1cbiAgLmNvbnRlbnQgOmdsb2JhbCh1bCBsaTpiZWZvcmUpIHtcbiAgICBmb250LXNpemU6IDE2LjhweDtcbiAgICBjb250ZW50OiBcIlxcMjAyMlwiO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBsZWZ0OiAwO1xuICB9XG4gIC5jb250ZW50IDpnbG9iYWwoYmxvY2txdW90ZSkge1xuICAgIGJvcmRlci1sZWZ0OiAycHggc29saWQgI2E3YTBhMDtcbiAgICBwYWRkaW5nOiAwLjVlbSAxMHB4O1xuICB9XG5cbiAgcHJvZ3Jlc3Mge1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBib3JkZXItd2lkdGg6IDA7XG4gICAgYmFja2dyb3VuZDogbm9uZTtcbiAgICBib3JkZXItcmFkaXVzOiAxcHg7XG4gICAgbWFyZ2luOiAtN3JlbSAtMnJlbSAwIC0ycmVtO1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEuNXB4O1xuICAgIHotaW5kZXg6IDI7XG4gICAgY29sb3I6ICNmZjNlMDA7XG4gIH1cbiAgcHJvZ3Jlc3M6Oi1tb3otcHJvZ3Jlc3MtYmFyIHtcbiAgICBiYWNrZ3JvdW5kOiAjZmYzZTAwO1xuICAgIGJvcmRlci1yYWRpdXM6IDFweDtcbiAgfVxuICBwcm9ncmVzczo6LXdlYmtpdC1wcm9ncmVzcy1iYXIge1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMCk7XG4gIH1cbiAgcHJvZ3Jlc3M6Oi13ZWJraXQtcHJvZ3Jlc3MtdmFsdWUge1xuICAgIGJhY2tncm91bmQ6ICNmZjNlMDA7XG4gICAgYm9yZGVyLXJhZGl1czogMXB4O1xuICB9XG4gIC5uYXYge1xuICAgIGNvbG9yOiAjNTU1O1xuICAgIG1hcmdpbi10b3A6IDRyZW07XG4gIH1cbiAgaDEge1xuICAgIG1hcmdpbjogLTAuN3JlbSAwIDAgMDtcbiAgICBtYXgtd2lkdGg6IDU4cmVtO1xuICB9XG4gIC5zdWJ0aXRsZSB7XG4gICAgY29sb3I6ICM1NTU7XG4gICAgbWF4LXdpZHRoOiA0MHJlbTtcbiAgfVxuICAuc3VidGl0bGUgLmNvbGxhYiB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmb250LXNpemU6IDAuN3JlbTtcbiAgICBjb2xvcjogIzU1NTtcbiAgfVxuICAudGFncyB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4OiAxO1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgfVxuXG4gIC50YWdzIHNwYW4ge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gIH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDQwcmVtKSB7XG4gICAgLnN1YnRpdGxlIC5jb2xsYWIge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGZvbnQtc2l6ZTogMC42cmVtO1xuICAgICAgY29sb3I6ICM1NTU7XG4gICAgfVxuICB9XG48L3N0eWxlPlxuXG48c3ZlbHRlOndpbmRvdyBiaW5kOnNjcm9sbFk9e3l9IC8+XG5cbjxkaXYgYmluZDpjbGllbnRIZWlnaHQ9e2h9PlxuICB7I2lmIHNob3dBbmltYXRpb259XG4gICAgPHByb2dyZXNzXG4gICAgICBpbjpmYWRlPXt7IGRlbGF5OiA1MDAsIGR1cmF0aW9uOiAwIH19XG4gICAgICB2YWx1ZT17JHByb2dyZXNzfVxuICAgICAgbWF4PVwiMTAwXCIgLz5cbiAgICA8cCBpbjpmYWRlPXt7IGRlbGF5OiAyMDAsIGR1cmF0aW9uOiA1MDAgfX0gY2xhc3M9XCJuYXZcIj5cbiAgICAgIDxhIGhyZWY9XCIvXCI+aG9tZTwvYT5cbiAgICAgIC9cbiAgICAgIDxhIGhyZWY9XCIvYmxvZy9cIj5ibG9nPC9hPlxuICAgICAgL1xuICAgICAgPGEgaHJlZj1cIi9ibG9nL3twb3N0LnNsdWd9L1wiPntwb3N0LnNsdWd9PC9hPlxuICAgIDwvcD5cbiAgICA8aDEgaW46ZmFkZT17eyBkZWxheTogMjAwLCBkdXJhdGlvbjogNTAwIH19Pntwb3N0LnRpdGxlfSB7cG9zdC5lbW9qaX08L2gxPlxuICAgIDxkaXYgaW46Zmx5PXt7IGRlbGF5OiAyNTAsIHg6IC01MCwgZHVyYXRpb246IDUwMCB9fSBjbGFzcz1cInN1YnRpdGxlXCI+XG4gICAgICA8cD5cbiAgICAgICAge0BodG1sIHBvc3QuYmx1cmJ9XG4gICAgICAgIHsjaWYgcG9zdC5jb2xsYWJvcmF0b3JzfVxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY29sbGFiXCI+XG4gICAgICAgICAgICB7I2VhY2ggcG9zdC5jb2xsYWJvcmF0b3JzIGFzIGNvbGxhYn1cbiAgICAgICAgICAgICAgPGEgYXJpYS1sYWJlbD1cImNvbGxhYm9yYXRvclwiIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20ve2NvbGxhYn0vXCI+XG4gICAgICAgICAgICAgICAgQHtjb2xsYWJ9XG4gICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgJm5ic3A7XG4gICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICB7L2lmfVxuICAgICAgICA8c3BhbiBjbGFzcz1cInRhZ3NcIj5cbiAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgIHsjZWFjaCBwb3N0LnRhZ3MgYXMgdGFnSWR9XG4gICAgICAgICAgICAgIDxUYWcge3RhZ0lkfSAvPlxuICAgICAgICAgICAgey9lYWNofVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8cD57cG9zdC5kYXRlfTwvcD5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9wPlxuICAgIDwvZGl2PlxuICAgIHsjaWYgZGF0YUxvYWRlZH1cbiAgICAgIDxkaXYgaW46Zmx5PXt7IGRlbGF5OiAyMDAsIHk6IDUwLCBkdXJhdGlvbjogNTAwIH19IGNsYXNzPVwiY29udGVudFwiPlxuICAgICAgICB7QGh0bWwgcG9zdC5odG1sfVxuICAgICAgPC9kaXY+XG4gICAgey9pZn1cbiAgey9pZn1cbjwvZGl2PlxuPHN2ZWx0ZTpoZWFkPlxuICA8dGl0bGU+e3Bvc3QuZW1vaml9e3Bvc3QudGl0bGV9IC0gQ2FtZXJvbiBSYXltb25ke3Bvc3QuZW1vaml9PC90aXRsZT5cblxuICA8bGluayByZWw9XCJjYW5vbmljYWxcIiBocmVmPVwiaHR0cHM6Ly9jYW1lcm9ucmF5bW9uZC5tZS9ibG9nL3twb3N0LnNsdWd9L1wiIC8+XG4gIDxtZXRhIG5hbWU9XCJkZXNjcmlwdGlvblwiIGNvbnRlbnQ9e3Bvc3QuYmx1cmJ9IC8+XG4gIDxtZXRhXG4gICAgbmFtZT1cImtleXdvcmRzXCJcbiAgICBjb250ZW50PVwiQ2FtZXJvbiBSYXltb25kLCBVbml2ZXJzaXR5IG9mIE94Zm9yZCwgT3hmb3JkIFVuaXZlcnNpdHksIERhdGFcbiAgICBTY2llbmNlLCBTb2NpYWwgRGF0YSBTaWVuY2UsIERhdGEgU2NpZW50aXN0XCIgLz5cblxuICA8IS0tIE9wZW4gR3JhcGggLyBGYWNlYm9vayAtLT5cbiAgPG1ldGEgcHJvcGVydHk9XCJvZzp0eXBlXCIgY29udGVudD1cIndlYnNpdGVcIiAvPlxuICA8bWV0YVxuICAgIHByb3BlcnR5PVwib2c6dXJsXCJcbiAgICBjb250ZW50PVwiaHR0cHM6Ly9jYW1lcm9ucmF5bW9uZC5tZS9ibG9nL3twb3N0LnNsdWd9L1wiIC8+XG4gIDxtZXRhXG4gICAgcHJvcGVydHk9XCJvZzp0aXRsZVwiXG4gICAgY29udGVudD1cIntwb3N0LmVtb2ppfXtwb3N0LnRpdGxlfSAtIENhbWVyb24gUmF5bW9uZHtwb3N0LmVtb2ppfVwiIC8+XG4gIDxtZXRhIG5hbWU9XCJvZzpkZXNjcmlwdGlvblwiIGNvbnRlbnQ9e3Bvc3QuYmx1cmJ9IC8+XG4gIDxtZXRhIHByb3BlcnR5PVwib2c6aW1hZ2VcIiBjb250ZW50PVwiaHR0cHM6Ly9jYW1lcm9ucmF5bW9uZC5tZS9uZXR3b3JrZC5wbmdcIiAvPlxuXG4gIDwhLS0gVHdpdHRlciAtLT5cbiAgPG1ldGEgcHJvcGVydHk9XCJ0d2l0dGVyOmNhcmRcIiBjb250ZW50PVwic3VtbWFyeVwiIC8+XG4gIDxtZXRhXG4gICAgcHJvcGVydHk9XCJ0d2l0dGVyOnVybFwiXG4gICAgY29udGVudD1cImh0dHBzOi8vY2FtZXJvbnJheW1vbmQubWUvYmxvZy97cG9zdC5zbHVnfS9cIiAvPlxuICA8bWV0YVxuICAgIHByb3BlcnR5PVwidHdpdHRlcjp0aXRsZVwiXG4gICAgY29udGVudD1cIntwb3N0LmVtb2ppfXtwb3N0LnRpdGxlfSAtIENhbWVyb24gUmF5bW9uZHtwb3N0LmVtb2ppfVwiIC8+XG4gIDxtZXRhIHByb3BlcnR5PVwidHdpdHRlcjpkZXNjcmlwdGlvblwiIGNvbnRlbnQ9e3Bvc3QuYmx1cmJ9IC8+XG4gIDxtZXRhXG4gICAgcHJvcGVydHk9XCJ0d2l0dGVyOmltYWdlXCJcbiAgICBjb250ZW50PVwiaHR0cHM6Ly9jYW1lcm9ucmF5bW9uZC5tZS9uZXR3b3JrZC5wbmdcIiAvPlxuPC9zdmVsdGU6aGVhZD5cbiJdLCJuYW1lcyI6WyJsaW5lYXIiXSwibWFwcGluZ3MiOiI7OztBQUlBLFNBQVMsT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUN0QixJQUFJLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLGVBQWUsQ0FBQztBQUNuRSxDQUFDO0FBNEdEO0FBQ0EsU0FBUyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQ2hDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQzFCLFFBQVEsT0FBTyxNQUFNLENBQUMsQ0FBQztBQUN2QixJQUFJ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
