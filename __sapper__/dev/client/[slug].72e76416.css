.content.svelte-1nd7ur6.svelte-1nd7ur6{display:flex;flex-direction:column;margin:auto;width:80vw;max-width:40rem}.content.svelte-1nd7ur6 code{display:inline-block;width:100%;overflow:auto}.content.svelte-1nd7ur6 img:first-of-type{max-height:initial}.content.svelte-1nd7ur6 img{align-self:center;margin:1rem auto 0.1rem auto;width:auto;height:auto;max-width:100%;max-height:30rem}.content.svelte-1nd7ur6 h2{margin-top:1.5rem}.content.svelte-1nd7ur6 h3{margin-top:1rem}.content.svelte-1nd7ur6 em{text-align:center;color:#555}.content.svelte-1nd7ur6 p > em{color:inherit}.content.svelte-1nd7ur6 ul{position:relative;list-style:none;margin-left:0;padding-left:1.2em}.content.svelte-1nd7ur6 ul li:before{font-size:16.8px;content:"\2022";position:absolute;left:0}.content.svelte-1nd7ur6 blockquote{border-left:2px solid #a7a0a0;padding:0.5em 10px}progress.svelte-1nd7ur6.svelte-1nd7ur6{border:none;border-width:0;background:none;border-radius:1px;margin:-7rem -2rem 0 -2rem;position:fixed;width:100%;height:1.5px;z-index:2;color:#ff3e00}progress.svelte-1nd7ur6.svelte-1nd7ur6::-moz-progress-bar{background:#ff3e00;border-radius:1px}progress.svelte-1nd7ur6.svelte-1nd7ur6::-webkit-progress-bar{background:rgba(255, 255, 255, 0)}progress.svelte-1nd7ur6.svelte-1nd7ur6::-webkit-progress-value{background:#ff3e00;border-radius:1px}.nav.svelte-1nd7ur6.svelte-1nd7ur6{color:#555;margin-top:4rem}h1.svelte-1nd7ur6.svelte-1nd7ur6{margin:-0.7rem 0 0 0;max-width:58rem}.subtitle.svelte-1nd7ur6.svelte-1nd7ur6{color:#555;max-width:40rem}.subtitle.svelte-1nd7ur6 .collab.svelte-1nd7ur6{display:flex;font-size:0.7rem;color:#555}.tags.svelte-1nd7ur6.svelte-1nd7ur6{display:flex;flex:1;justify-content:space-between;align-items:center;flex-wrap:wrap}.tags.svelte-1nd7ur6 span.svelte-1nd7ur6{display:flex}@media(max-width: 40rem){.subtitle.svelte-1nd7ur6 .collab.svelte-1nd7ur6{display:flex;font-size:0.6rem;color:#555}}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */