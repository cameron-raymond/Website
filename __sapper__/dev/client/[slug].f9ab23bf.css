progress.svelte-1nd7ur6.svelte-1nd7ur6{border:none;border-width:0;background:none;border-radius:1px;margin:-7rem -2rem 0 -2rem;position:fixed;width:100%;height:1.5px;z-index:2;color:#ff3e00}progress.svelte-1nd7ur6.svelte-1nd7ur6::-moz-progress-bar{background:#ff3e00;border-radius:1px}progress.svelte-1nd7ur6.svelte-1nd7ur6::-webkit-progress-bar{background:rgba(255, 255, 255, 0)}progress.svelte-1nd7ur6.svelte-1nd7ur6::-webkit-progress-value{background:#ff3e00;border-radius:1px}.nav.svelte-1nd7ur6.svelte-1nd7ur6{color:#555;margin-top:4rem}h1.svelte-1nd7ur6.svelte-1nd7ur6{margin:-0.7rem 0 0 0;max-width:58rem}.subtitle.svelte-1nd7ur6.svelte-1nd7ur6{color:#555;max-width:40rem}.subtitle.svelte-1nd7ur6 .collab.svelte-1nd7ur6{display:flex;font-size:0.7rem;color:#555}.tags.svelte-1nd7ur6.svelte-1nd7ur6{display:flex;flex:1;justify-content:space-between;align-items:center;flex-wrap:wrap}.tags.svelte-1nd7ur6 span.svelte-1nd7ur6{display:flex}@media(max-width: 40rem){.subtitle.svelte-1nd7ur6 .collab.svelte-1nd7ur6{display:flex;font-size:0.6rem;color:#555}}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */