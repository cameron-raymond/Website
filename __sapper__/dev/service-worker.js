(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1674616821174;

	const files = [
		"service-worker-index.html",
		"CNAME",
		"cameron-raymond-resume.pdf",
		"content/about/booklist.md",
		"content/about/bottom-content.md",
		"content/about/current-meme.png",
		"content/about/current-meme.webp",
		"content/about/intro.md",
		"content/about/portrait.png",
		"content/about/portrait.webp",
		"content/blog/anything2vec.md",
		"content/blog/bitmoji-segmentation.md",
		"content/blog/covid-music.md",
		"content/blog/covid-rct-trial.md",
		"content/blog/messaging-interoperability.md",
		"content/blog/openai-update.md",
		"content/blog/oxford-thesis.md",
		"content/blog/political-community-embedding.md",
		"content/blog/political-topic-centrality-1.md",
		"content/blog/political-topic-centrality-2.md",
		"content/blog/political-topic-centrality-3.md",
		"content/blog/political-topic-centrality.md",
		"content/blog/power-simulations-in-r.md",
		"content/blog/right-to-be-forgotten-ml.md",
		"content/blog/rl-for-traffic-flow.md",
		"content/blog/shakespeare-netlsd.md",
		"content/blog/stochastic-blockmodels.md",
		"content/blog/word2vec-cultural-dims.md",
		"content/openai-update/bell-curve.png",
		"content/openai-update/header.png",
		"content/political-community-embedding/Measuring_Alignment_of_Online_Grassroots_Political_Communities_with_Political_Campaigns.pdf",
		"content/rl-for-traffic-flow/CO2_LoopRoute_EGreedy.png",
		"content/rl-for-traffic-flow/CO2_LoopRoute_Softmax.png",
		"content/rl-for-traffic-flow/CO2_NormalRoute_EGreedy.png",
		"content/rl-for-traffic-flow/CO2_NormalRoute_Softmax.png",
		"content/rl-for-traffic-flow/DailyAvg_LoopRoute_EGreedy.png",
		"content/rl-for-traffic-flow/DailyAvg_LoopRoute_Softmax.png",
		"content/rl-for-traffic-flow/DailyAvg_NormalRoute_EGreedy.png",
		"content/rl-for-traffic-flow/DailyAvg_NormalRoute_Softmax.png",
		"content/rl-for-traffic-flow/OneDay_NormalRoute_EGreedy.png",
		"content/rl-for-traffic-flow/showcase.gif",
		"content/rl-for-traffic-flow/traffic-setup.png",
		"favicon.png",
		"global.css",
		"intro.svg",
		"logo-150.png",
		"logo-310.png",
		"manifest.json",
		"networkd.png",
		"robots.txt",
		"summary_about_large.png",
		"summary_large_image.png",
		"tags/bp.png",
		"tags/bp.webp",
		"tags/ci.png",
		"tags/ci.webp",
		"tags/gt.png",
		"tags/gt.webp",
		"tags/ml.png",
		"tags/ml.webp",
		"tags/nlp.png",
		"tags/nlp.webp",
		"tags/pl.png",
		"tags/pl.webp",
		"tags/rl.png",
		"tags/rl.webp",
		"tags/rp.png",
		"tags/rp.webp",
		"tags/sp.png",
		"tags/sp.webp"
	];

	const shell = [
		"client/client.b259bf52.js",
		"client/Head.9ceb15c5.js",
		"client/Tag.5ea4ce32.js",
		"client/index.a4ceb210.js",
		"client/PostFilter.5f5eb815.js",
		"client/index.f8b693c8.js",
		"client/booklist.d96b7688.js",
		"client/index.90c38821.js",
		"client/[slug].ce236cb8.js",
		"client/sapper-dev-client.1e7a4a5e.js",
		"client/client.05b954e0.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;

		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

		// always serve static files and bundler-generated assets from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}

		// for pages, you might want to serve a shell `service-worker-index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

		if (event.request.cache === 'only-if-cached') return;

		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch(err) {
						const response = await cache.match(event.request);
						if (response) return response;

						throw err;
					}
				})
		);
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
