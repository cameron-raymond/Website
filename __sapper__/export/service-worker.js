!function(){"use strict";const t=["client/Tag.2ddad0a9.js","client/client.9ec7e11b.js","client/index.dc43b9d3.js","client/index.95f88fd6.js","client/[slug].3f331e1e.js","client/index.4519a08a.js","client/PostFilter.c1a617f8.js","client/client.e75a9efc.js"].concat(["service-worker-index.html",".DS_Store","CNAME","Measuring_Alignment_of_Online_Grassroots_Political_Communities_with_Political_Campaigns.pdf","cameron-raymond-resume.pdf","content/rl-for-traffic-flow/1918-spanish-flu.jpg","content/rl-for-traffic-flow/CO2_LoopRoute_EGreedy.png","content/rl-for-traffic-flow/CO2_LoopRoute_Softmax.png","content/rl-for-traffic-flow/CO2_NormalRoute_EGreedy.png","content/rl-for-traffic-flow/CO2_NormalRoute_Softmax.png","content/rl-for-traffic-flow/DailyAvg_LoopRoute_EGreedy.png","content/rl-for-traffic-flow/DailyAvg_LoopRoute_Softmax.png","content/rl-for-traffic-flow/DailyAvg_NormalRoute_EGreedy.png","content/rl-for-traffic-flow/DailyAvg_NormalRoute_Softmax.png","content/rl-for-traffic-flow/OneDay_NormalRoute_EGreedy.png","content/rl-for-traffic-flow/showcase.gif","content/rl-for-traffic-flow/traffic-setup.png","favicon.png","global.css","intro.svg","logo-150.png","logo-310.png","manifest.json","networkd.png","portrait.png","portrait.webp","robots.txt","summary_about_large.png","summary_large_image.png","tags/.DS_Store","tags/bp.png","tags/bp.webp","tags/gt.png","tags/gt.webp","tags/ml.png","tags/ml.webp","tags/nlp.png","tags/nlp.webp","tags/pl.png","tags/pl.webp","tags/rl.png","tags/rl.webp","tags/rp.png","tags/rp.webp","tags/sp.png","tags/sp.webp"]),e=new Set(t);self.addEventListener("install",e=>{e.waitUntil(caches.open("cache1617700640768").then(e=>e.addAll(t)).then(()=>{self.skipWaiting()}))}),self.addEventListener("activate",t=>{t.waitUntil(caches.keys().then(async t=>{for(const e of t)"cache1617700640768"!==e&&await caches.delete(e);self.clients.claim()}))}),self.addEventListener("fetch",t=>{if("GET"!==t.request.method||t.request.headers.has("range"))return;const n=new URL(t.request.url);n.protocol.startsWith("http")&&(n.hostname===self.location.hostname&&n.port!==self.location.port||(n.host===self.location.host&&e.has(n.pathname)?t.respondWith(caches.match(t.request)):"only-if-cached"!==t.request.cache&&t.respondWith(caches.open("offline1617700640768").then(async e=>{try{const n=await fetch(t.request);return e.put(t.request,n.clone()),n}catch(n){const o=await e.match(t.request);if(o)return o;throw n}}))))})}();
